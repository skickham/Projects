p2$asian[i] = grepl('asian', p2$ethnicity[i])*1
p2$black[i] = grepl('black', p2$ethnicity[i])*1
p2$hispanic[i] = grepl('hispanic', p2$ethnicity[i])*1
p2$indian[i] = grepl('indian', p2$ethnicity[i])*1
p2$middleeastern[i] = grepl('middle', p2$ethnicity[i])*1
p2$nativeamerican[i] = grepl('native', p2$ethnicity[i])*1
p2$pacificislander[i] = grepl('pacific', p2$ethnicity[i])*1
p2$white[i] = grepl('white', p2$ethnicity[i])*1
p2$other[i] = grepl('other', p2$ethnicity[i])*1
}
for (i in 1:nrow(p2)) {
p2$multiethnic[i] = ifelse(sum(p2[i, 22:29]) > 1, 1, 0)
}
sum(p2[,22:29]) - sum(p2$multiethnic)
p2$ethnicity[p2$multiethnic == 1] = 'multiethnic'
p2$ethnicity[p2$ethnicity == 'asian, other'] = 'asian'
p2$ethnicity[p2$ethnicity == 'black, other'] = 'black'
p2$ethnicity[p2$ethnicity == 'hispanic / latin, other'] = 'hispanic / latin'
p2$ethnicity[p2$ethnicity == 'indian, other'] = 'indian'
p2$ethnicity[p2$ethnicity == 'middle eastern, other'] = 'middle eastern'
p2$ethnicity[p2$ethnicity == 'native american, other'] = 'native american'
p2$ethnicity[p2$ethnicity == 'pacific islander, other'] = 'pacific islander'
p2$ethnicity[p2$ethnicity == 'white, other'] = 'white'
p3 = p2
sort(unique(p2$sign))
p2$sign_serious = 0
for (i in 1:nrow(p2)) {
if (grepl('matters', p2$sign[i])){
p2$sign_serious[i] = 3
} else {
if (grepl('fun', p2$sign[i])) {
p2$sign_serious[i] = 2
} else {
if (grepl('but', p2$sign[i])) {
p2$sign_serious[i] = 1
} else {
p2$sign_serious[i] = 0
}
}
}
}
for (i in 1:nrow(p2)) {
if (is.na(p2$sign[i])){
p2$sign_serious[i] = NA
}
}
p2$sign[grepl('aries', p2$sign)] = 'aries'
p2$sign[grepl('cancer', p2$sign)] ='cancer'
p2$sign[grepl('taurus', p2$sign)] = 'taurus'
p2$sign[grepl('gemini', p2$sign)] = 'gemini'
p2$sign[grepl('leo', p2$sign)] = 'leo'
p2$sign[grepl('sagittarius', p2$sign)] = 'sagittarius'
p2$sign[grepl('scorpio', p2$sign)] = 'scorpio'
p2$sign[grepl('virgo', p2$sign)] = 'virgo'
p2$sign[grepl('pisces', p2$sign)] = 'pisces'
p2$sign[grepl('libra', p2$sign)] = 'libra'
p2$sign[grepl('capricorn', p2$sign)] = 'capricorn'
p2$sign[grepl('aquarius', p2$sign)] = 'aquarius'
sort(unique(p2$sign))
p3 = p2
sort(unique(p2$religion))
p2$religion_serious = 0
for (i in 1:nrow(p2)) {
if (grepl('very', p2$religion[i])){
p2$religion_serious[i] = 4
} else {
if (grepl('somewhat', p2$religion[i])) {
p2$religion_serious[i] = 3
} else {
if (grepl('not too', p2$religion[i])) {
p2$religion_serious[i] = 2
} else {
if (grepl('laughing', p2$religion[i])) {
p2$religion_serious[i] = 1
} else {
p2$religion_serious[i] = 0
}
}
}
}
}
for (i in 1:nrow(p2)) {
if (is.na(p2$religion[i])){
p2$religion_serious[i] = NA
}
}
p2$religion[grepl('agnosticism', p2$religion)] = 'agnosticism'
p2$religion[grepl('atheism', p2$religion)] = 'atheism'
p2$religion[grepl('buddhism', p2$religion)] = 'buddhism'
p2$religion[grepl('catholicism', p2$religion)] = 'catholicism'
p2$religion[grepl('christianity', p2$religion)] = 'christianity'
p2$religion[grepl('hinduism', p2$religion)] = 'hinduism'
p2$religion[grepl('islam', p2$religion)] = 'islam'
p2$religion[grepl('judaism', p2$religion)] = 'judaism'
p2$religion[grepl('other', p2$religion)] = 'other'
sort(unique(p2$religion))
p3 = p2
sort(unique(p2$education))
p2$edu_complete = 3
for (i in 1:nrow(p2)) {
if (grepl('grad', p2$education[i])){
p2$edu_complete[i] = 2
} else {
if (grepl('work', p2$education[i])) {
p2$edu_complete[i] = 1
} else {
if (grepl('drop', p2$education[i])) {
p2$edu_complete[i] = 0
} else {
p2$edu_complete[i] = 3
}
}
}
}
for (i in 1:nrow(p2)) {
if (is.na(p2$education[i])){
p2$edu_complete[i] = NA
}
}
length(p2$edu_complete[p2$edu_complete == 0 & !is.na(p2$edu_complete)])
length(p2$education[p2$education == 'dropped out of high school' & !is.na(p2$education)]) #102 not finished high school
p2$education[grepl('university', p2$education)] = 'college/university'
p2$education[grepl('law', p2$education)] = 'law school'
p2$education[grepl('med', p2$education)] = 'med school'
p2$education[grepl('space', p2$education)] = 'space camp'
p2$education[grepl('high', p2$education)] = 'high school'
p2$education[grepl('masters', p2$education)] = 'masters'
p2$education[grepl('ph.d', p2$education)] = 'ph.d'
p2$education[grepl('two', p2$education)] = 'two-year college'
sort(unique(p2$education))
p3 = p2
sort(unique(p2$smokes))
sort(unique(p2$status))
sort(unique(p2$speaks))
sort(unique(p2$sex))
sort(unique(p2$pets))
sort(unique(p2$orientation))
sort(unique(p2$offspring))
p3 = p2
sort(unique(p2$offspring))
p2$offspring[grepl('has', p2$offspring)] = 'has kid(s)'
sort(unique(p2$offspring))
p2$offspring[grepl('wants', p2$offspring)] = 'wants kid(s)'
sort(unique(p2$offspring))
p2$offspring[grepl('might', p2$offspring)] = 'unsure'
sort(unique(p2$offspring))
p2$offspring[grepl('doesn&rsquo;t want', p2$offspring)] = 'not want kid(s)'
sort(unique(p2$offspring))
p2$offspring[grepl('have', p2$offspring)] = 'has no kid(s)'
sort(unique(p2$offspring))
p3 = p2
sort(unique(p2$location))
sort(unique(p2$job))
sort(unique(p2$income))
sort(unique(p2$drugs))
sort(unique(p2$drinks))
sort(unique(p2$diet))
ggplot(p2, aes(x = diet)) + geom_bar()
p2$diet[grepl('anything', p2$diet)] = 'anything'
p2$diet[grepl('halal', p2$diet)] = 'halal'
p2$diet[grepl('kosher', p2$diet)] = 'kosher'
p2$diet[grepl('vegan', p2$diet)] = 'vegan'
p2$diet[grepl('vegetarian', p2$diet)] = 'vegetarian'
sort(unique(p2$diet))
p2$diet[grepl('other', p2$diet)] = 'other'
sort(unique(p2$diet))
ggplot(p2, aes(x = diet)) + geom_bar()
sort(unique(p2$body_type))
sort(unique(p2$age))
sort(unique(p2$pets))
p2$dogs = NA
p2$dogs[grepl('dislikes dogs', p2$pets)] = 'dislikes'
p2$dogs[grepl('dislikes dogs', p2$pets)] = 'dislikes'
p2$dogs[grepl('dislikes dogs', p2$pets)] = 'dislikes'
p2$dogs[grepl('likes dogs', p2$pets)] = 'likes'
p2$dogs[grepl('has dogs', p2$pets)] = 'has'
p2$cats = NA
p2$cats[grepl('dislikes cats', p2$pets)] = 'dislikes'
p2$cats[grepl('likes cats', p2$pets)] = 'likes'
p2$cats[grepl('has cats', p2$pets)] = 'has'
p2$dogs[grepl('likes dogs', p2$pets)] = 'likes'
p2$dogs[grepl('dislikes dogs', p2$pets)] = 'dislikes'
p2$dogs[grepl('has dogs', p2$pets)] = 'has'
p2$cats[grepl('likes cats', p2$pets)] = 'likes'
p2$cats[grepl('dislikes cats', p2$pets)] = 'dislikes'
p2$cats[grepl('has cats', p2$pets)] = 'has'
sort(unique(p2$cats))
sort(unique(p2$dogs))
nrow(p2[p2$cats == 'has'])
nrow(p2$cats[p2$cats == 'has'])
nrow(p2$cats[p2$cats == 'has' & !is.na(p2$cats)])
length(p2$cats[p2$cats == 'has' & !is.na(p2$cats)])
n(p2$cats[p2$cats == 'has' & !is.na(p2$cats)])
n(p2$cats[p2$cats == 'has'])
length(p2$cats[p2$cats == 'has' & !is.na(p2$cats)])
length(p2$cats[p2$cats == 'likes' & !is.na(p2$cats)])
length(p2$cats[p2$cats == 'dislikes' & !is.na(p2$cats)])
length(p2$cats[is.na(p2$cats)])
str(p2)
length(p2$dogs[p2$dogs == 'has' & !is.na(p2$dogs)])
length(p2$dogs[p2$dogs == 'likes' & !is.na(p2$dogs)])
length(p2$dogs[p2$dogs == 'dislikes' & !is.na(p2$dogs)])
length(p2$cats[is.na(p2$dogs)])
length(p2$dogs[p2$dogs == 'has' & !is.na(p2$dogs)]) +
length(p2$dogs[p2$dogs == 'likes' & !is.na(p2$dogs)]) +
length(p2$dogs[p2$dogs == 'dislikes' & !is.na(p2$dogs)]) +
length(p2$cats[is.na(p2$dogs)])
length(p2$cats[p2$cats == 'has' & !is.na(p2$cats)]) +
length(p2$cats[p2$cats == 'likes' & !is.na(p2$cats)]) +
length(p2$cats[p2$cats == 'dislikes' & !is.na(p2$cats)]) +
length(p2$cats[is.na(p2$cats)])
write.csv(p2, file = 'p2.csv', row.names = FALSE)
rm(list = ls())
library(tidyr)
library(tidyverse)
library(data.table)
library(dplyr)
library(ggplot2)
food = fread('/Users/skick/Desktop/chewy/chewyfood.csv',
stringsAsFactors = FALSE)
View(food)
food$lifestage.split()
food$lifestage[grepl]
strsplit(food$lifestage, ',_')
food$lifestage = strsplit(food$lifestage, ',_')
View(food)
food$dimensions = NULL
View(food)
food$breed_size = strsplit(food$lifestage, ',_')
food$breed_size = strsplit(food$breed_size, ',_')
refcols = c("item_number", "category", "page", "brand", "product_name", "product_description", "rating", "percent_rec", "cost", "old_cost" )
food[, c(refcols, setdiff(names(food), refcols))]
refcols = c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost" )
food[, c(refcols, setdiff(names(food), refcols))]
food = food[, c(refcols, setdiff(names(food), refcols))]
food = fread('/Users/skick/Desktop/chewy/chewyfood.csv',
stringsAsFactors = FALSE)
food$lifestage = strsplit(food$lifestage, ',_')
food$dimensions = NULL
food$breed_size = strsplit(food$breed_size, ',_')
refcols = c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost" )
food[, c(refcols, setdiff(names(food), refcols))]
k = food[, c(refcols, setdiff(names(food), refcols))]
View(k)
k = food[, c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost")]
View(k)
k = food[, c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost", "size", "weight", "breed_size",
"lifestage", "food_form", "food_texture", "special_diet",
"supplement_form", "fish_type", "small_pet_type", "reptile_type", "bird_type", "made_in")]
View(k)
food = food[, c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost", "size", "weight", "breed_size",
"lifestage", "food_form", "food_texture", "special_diet",
"supplement_form", "fish_type", "small_pet_type", "reptile_type", "bird_type", "made_in")]
replace(food$old_cost, "None", NA)
replace(food$old_cost, x=="None", NA)
replace(food$old_cost, food$old_cost=="None", NA)
food$old_cost= replace(food$old_cost, food$old_cost=="None", NA)
food$size = replace(food$size, food$size=="None", NA)
food$breed_size = replace(food$breed_size, food$breed_size=="character(0)", NA)
food$lifestage = replace(food$lifestage, food$lifestage=="character(0)", NA)
food$no_reviews = replace(food$no_reviews, food$no_reviews=="None", 0)
replace(food$old_cost, food$old_cost=="None", NA)
gsub('\\$', '', food$cost)
food$cost = gsub('\\$', '', food$cost)
food$old_cost = gsub('\\$', '', food$old_cost)
for (i in 1:nrow(food)) {
if (grepl('pound', food$weight[i])){
food$weight_in_pounds[i] = food$weight[i]
}
}
food$weight = replace(food$size, food$weight =="", NA)
food = fread('/Users/skick/Desktop/chewy/chewyfood.csv',
stringsAsFactors = FALSE)
food$lifestage = strsplit(food$lifestage, ',_')
food$dimensions = NULL
food$breed_size = strsplit(food$breed_size, ',_')
food = food[, c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost", "size", "weight", "breed_size",
"lifestage", "food_form", "food_texture", "special_diet",
"supplement_form", "fish_type", "small_pet_type", "reptile_type", "bird_type", "made_in")]
food$old_cost = replace(food$old_cost, food$old_cost=="None", NA)
food$size = replace(food$size, food$size =="None", NA)
food$weight = replace(food$weight, food$weight =="", NA)
food$no_reviews = replace(food$no_reviews, food$no_reviews=="None", 0)
food$breed_size = replace(food$breed_size, food$breed_size=="character(0)", NA)
food$lifestage = replace(food$lifestage, food$lifestage=="character(0)", NA)
food$cost = gsub('\\$', '', food$cost)
food$old_cost = gsub('\\$', '', food$old_cost)
sim(is.na(food$weight))
sum(is.na(food$weight))
if (grepl('pound', food$weight[i])){
food$weight_in_pounds[i] = food$weight[i]
}
type(food$weight)
class(food$weight)
food$weight_in_pounds[i] = food$weight[i]
for (i in 1:nrow(food)) {
if (grepl('pound', food$weight[i])){
food$weight_in_pounds[i] = food$weight[i]
}
}
food$weight_in_pounds = NULL
for (i in 1:nrow(food)) {
if (grepl('pound', food$weight[i])){
food$weight_in_pounds[i] = food$weight[i]
}
}
View(food[,c("weight", "weight_in_pounds")])
food$weight_in_pounds = NULL
for (i in 1:nrow(food)) {
if (grepl('pound', food$weight[i])){
food$weight_in_pounds[i] = food$weight[i]
}
}
View(food[,c("weight", "weight_in_pounds")])
food$weight_in_pounds = NULL
food$breed_size = replace(food$breed_size, food$breed_size=="character(0)", NaN)
food = fread('/Users/skick/Desktop/chewy/chewyfood.csv',
stringsAsFactors = FALSE)
food$lifestage = strsplit(food$lifestage, ',_')
food$dimensions = NULL
food$breed_size = strsplit(food$breed_size, ',_')
food = food[, c("item_number", "category", "page", "brand",
"product_name", "product_description", "no_reviews", "rating",
"percent_rec", "cost", "old_cost", "size", "weight", "breed_size",
"lifestage", "food_form", "food_texture", "special_diet",
"supplement_form", "fish_type", "small_pet_type", "reptile_type", "bird_type", "made_in")]
food$old_cost = replace(food$old_cost, food$old_cost=="None", NA)
food$size = replace(food$size, food$size =="None", NA)
food$weight = replace(food$weight, food$weight =="", NA)
food$no_reviews = replace(food$no_reviews, food$no_reviews=="None", 0)
food$breed_size = replace(food$breed_size, food$breed_size=="character(0)", NaN)
food$lifestage = replace(food$lifestage, food$lifestage=="character(0)", NA)
food$cost = gsub('\\$', '', food$cost)
food$old_cost = gsub('\\$', '', food$old_cost)
ggplot(food, aes(x = rating)) + geom_density()
ggplot(food, aes(x = percent_rec)) + geom_density()
ggplot(food, aes(x = cost)) + geom_density()
ggplot(food, aes(x = cost)) + geom_boxplot()
ggplot(food, aes(x = category, x = cost)) + geom_boxplot()
ggplot(food, aes(x = category, y = cost)) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(cost))) + geom_boxplot()
(food$old_cost - food$cost)/food$old_cost
(as.numeric(food$old_cost) - as.numeric(food$cost))/as.numeric(food$old_cost)
food$sale = round((as.numeric(food$old_cost) - as.numeric(food$cost))/as.numeric(food$old_cost) * 100, 2)
ggplot(food, aes(x = category, y = as.numeric(sale))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(old_cost))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(size))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(weight))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + coord_trans(log)
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + coord_trans("log")
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + coord_trans(y ="log")
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + coord_trans(y ="log10")
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + coord_trans("log10")
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + ylim(1000)
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + ylim((0,1000))
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + ylim((0 1000))
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + ylim(0, 1000)
ggplot(food, aes(x = category, y = as.numeric(no_reviews))) + geom_boxplot() + ylim(0, 250)
ggplot(food, aes(x = category, y = as.numeric(rating))) + geom_boxplot()
ggplot(food, aes(x = category, y = as.numeric(percent_rec))) + geom_boxplot()
ggplot(food, aes(x = sale)) + geom_density()
rm(list = ls())
help(cars)
cars #Investigating the cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
head(cars)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
abline(beta0, beta1, lty = 2)
abline(beta0, beta1, lty = 3) #sketh line according to intercept and slope
abline(beta0, beta1, lty = 4) #sketh line according to intercept and slope
abline(beta0, beta1, lty = 1) #sketh line according to intercept and slope
abline(beta0, beta1, lty = 1.5) #sketh line according to intercept and slope
abline(beta0, beta1, lty = 2) #sketh line according to intercept and slope
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")   # somewhat linear
abline(beta0, beta1, lty = 1.5) #sketh line according to intercept and slope
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")   # somewhat linear
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
abline(beta0, beta1, lty = 3) #sketh line according to intercept and slope
residuals = cars$dist - (beta0 + beta1*cars$speed)
sum(residuals)
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
model
cor(cars[0][1])
cor(cars)[1]
cor(cars)[2]
cor(cars)[2]**2
model = lm(dist ~ speed - 1, data = cars)
modle
model
summary(model)
t.statistic = 9.464
f.statistic = 89.57
t.statistic^2
confint(model) #Creating 95% confidence intervals for the model coefficients.
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
qqnorm(model$residuals)    #
qqline(model$residuals)
plot(model) #Note the addition of the loess smoother and scale-location plot
library(car) #Companion to applied regression.
influencePlot(model)
names(model)
model$coefficients
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
predict(model, newdata, interval = "confidence") #Construct confidence intervals
newdata
predict(model, newdata)
predict(model, newdata, interval = "prediction") #Construct prediction invervals
newdata = data.frame(speed = 4:25)
conf.band = predict(model, newdata, interval = "confidence")
pred.band = predict(model, newdata, interval = "prediction")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
lambda
bc
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
summary(model)
plot(model.bc) #Assessing the assumptions of the new model.
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
library(caret)
boxcox = preProcess(cars %>% select(dist),
method = "BoxCox")
dist.bc1 = predict(boxcox, cars %>% select(dist))
print(dist.bc1)
print(dist.bc)
aggr(titanic3)
library(PASWR)
library(VIM)
library(mice)
library(caret)
library(RANN)
library(Hmisc)
library(deldir)
library(kknn)
library(dplyr)
library(ggplot2)
data("titanic3")
head(titanic3)
str(titanic3)
summary(titanic3)
?titanic3
sapply(titanic3, function(x) sum(is.na(x)))
round(sapply(titanic3, function(x) sum(is.na(x)))/dim(titanic3)[1]*100, 1)
sum(!complete.cases(titanic3))   #1190 incomplete cases
sum(!complete.cases(titanic3))/nrow(titanic3)   #91% incomplete
sum(complete.cases(titanic3))   #119 complete cases
sum(is.na(titanic3))  # 1452
sum(is.na(titanic3))/prod(dim(titanic3)) * 100     # 7.9% missing
md.pattern(titanic3)
aggr(titanic3)
aggr(titanic3, numbers = TRUE)
aggr(titanic3, numbers = TRUE)
md.pattern(titanic3)
table(titanic3$survived, is.na(titanic3$body))
hist(titanic3$age)
table(titanic3$survived, is.na(titanic3$body))
rm(list=ls())
